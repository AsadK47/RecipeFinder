# SwiftLint Configuration for RecipeFinder
# Production-grade configuration following Apple's Swift API Design Guidelines
# https://swift.org/documentation/api-design-guidelines/

# Paths to include/exclude
included:
  - RecipeFinder
  - RecipeFinderTests
  
excluded:
  - Pods
  - RecipeFinder.xcodeproj
  - RecipeFinder.xcworkspace
  - DerivedData
  - .build
  - docs
  - Assets.xcassets
  - RecipeFinderUITests

# ===========================
# DISABLED RULES
# Rules disabled for practical development while maintaining quality
# ===========================
disabled_rules:
  - todo # Allow TODO/FIXME comments for issue tracking
  - trailing_whitespace # Handled by editor auto-format
  - multiple_closures_with_trailing_closure # Common SwiftUI pattern
  - cyclomatic_complexity # Can be restrictive for view builders
  - function_body_length # SwiftUI views can be legitimately long
  - type_body_length # SwiftUI views can be legitimately long
  - file_length # SwiftUI views and models can be comprehensive
  
# ===========================
# OPT-IN RULES (Production Best Practices)
# Following Apple's guidelines and industry standards
# ===========================
opt_in_rules:
  # Code Quality
  - empty_count # Use isEmpty instead of count == 0
  - empty_string # Use isEmpty instead of == ""
  - first_where # Use first(where:) instead of filter + first
  - contains_over_first_not_nil # Use contains instead of first != nil
  - last_where # Use last(where:) instead of filter + last
  - reduce_boolean # Use reduce(false, ||) instead of filter + isEmpty
  
  # Safety & Robustness
  - fatal_error_message # Require message with fatalError
  - force_unwrapping # Warn on force unwrapping (!)
  - implicitly_unwrapped_optional # Warn on IUO usage
  - weak_delegate # Delegates should be weak
  
  # Code Style & Readability
  - multiline_parameters # Better readability for function signatures
  - multiline_arguments # Better readability for function calls
  - sorted_imports # Keep imports organized
  - vertical_parameter_alignment_on_call # Align parameters vertically
  - explicit_init # Use .init() explicitly when needed
  - closure_spacing # Proper spacing in closures
  - operator_usage_whitespace # Proper spacing around operators
  
  # SwiftUI Best Practices
  - accessibility_label_for_image # Accessibility for images
  
  # Documentation
  - missing_docs # Require documentation for public APIs
  
# ===========================
# RULE CONFIGURATIONS
# Balanced for production quality and development productivity
# ===========================

line_length:
  warning: 150
  error: 200
  ignores_comments: true
  ignores_urls: true
  ignores_function_declarations: true
  ignores_interpolated_strings: true
  
identifier_name:
  min_length:
    warning: 2
    error: 1
  max_length:
    warning: 50
    error: 60
  excluded:
    # Common single-letter variables
    - id
    - i
    - j
    - x
    - y
    - z
    - db
    - vm
    - vc
    # Core Data generated properties
    - _name
    - _id
    - _title
    # Common abbreviations
    - URL
    - URI
    - API
    - PDF
    - JSON
    - XML
    - HTTP
    - UI
    - UUID
    
function_parameter_count:
  warning: 6
  error: 8
  ignores_default_parameters: true
  
nesting:
  type_level:
    warning: 2
    error: 3
  statement_level:
    warning: 5
    error: 7

large_tuple:
  warning: 3
  error: 4

# Force unwrapping configuration
force_unwrapping:
  severity: warning # Allow but warn

# Force cast configuration  
force_cast:
  severity: warning # Allow but warn

# Implicitly unwrapped optional
implicitly_unwrapped_optional:
  severity: warning
  mode: all_except_iboutlets

# Missing docs configuration
missing_docs:
  warning: open
  excludes_extensions: true
  excludes_inherited_types: true

# ===========================
# CUSTOM RULES
# App-specific quality checks
# ===========================
custom_rules:
  # Prevent debug print statements in production
  no_print:
    name: "No Print Statements"
    regex: '^\s*print\('
    match_kinds: 
      - keyword
    message: "Use proper logging (os_log or Logger) instead of print()"
    severity: warning
    
  # Require MARK comments for organization
  marks_for_organization:
    name: "Use MARK for Code Organization"
    regex: '(class|struct|enum|extension)\s+\w+.*\{[^\n]*\n(?!\s*\/\/\s*MARK:)'
    message: "Use // MARK: comments to organize code sections"
    severity: warning

# ===========================
# ANALYZER RULES
# Compile-time analysis (run during build)
# ===========================
analyzer_rules:
  - unused_declaration
  - unused_import

# ===========================
# REPORTER
# ===========================
reporter: "xcode" # Xcode-friendly output format

# ===========================
# STRICT MODE FOR CI/CD
# Uncomment for continuous integration
# ===========================
# strict: true
# fail_on_warning: true
