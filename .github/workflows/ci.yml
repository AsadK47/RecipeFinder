name: iOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Prevent duplicate workflow runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SCHEME: RecipeFinder
  CONFIGURATION: Debug
  DESTINATION: 'platform=iOS Simulator,name=iPhone 17 Pro,OS=latest'

jobs:
  lint:
    name: üîç SwiftLint
    runs-on: macos-14
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Cache SwiftLint
        uses: actions/cache@v4
        with:
          path: /opt/homebrew/bin/swiftlint
          key: ${{ runner.os }}-swiftlint-0.54.0
          restore-keys: |
            ${{ runner.os }}-swiftlint-
      
      - name: Install SwiftLint
        run: |
          if ! command -v swiftlint &> /dev/null; then
            brew install swiftlint
          fi
      
      - name: Run SwiftLint
        run: |
          swiftlint lint RecipeFinder/ --config .swiftlint.yml --reporter github-actions-logging

  test:
    name: üß™ Run Unit Tests
    runs-on: macos-14
    timeout-minutes: 30
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer
      
      - name: Show Xcode version
        run: xcodebuild -version
      
      - name: List available simulators
        run: xcrun simctl list devices available
      
      - name: Cache SPM dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('**/*.swift', '**/*.m', '**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-
      
      - name: Resolve SPM dependencies
        run: |
          xcodebuild -resolvePackageDependencies -scheme ${{ env.SCHEME }}
      
      - name: Clean build folder
        run: |
          xcodebuild clean \
            -scheme ${{ env.SCHEME }} \
            -destination '${{ env.DESTINATION }}'
      
      - name: Build for testing
        run: |
          xcodebuild build-for-testing \
            -scheme ${{ env.SCHEME }} \
            -destination '${{ env.DESTINATION }}' \
            -configuration ${{ env.CONFIGURATION }} \
            -derivedDataPath DerivedData \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            -quiet
      
      - name: Run tests
        run: |
          set -o pipefail && xcodebuild test-without-building \
            -scheme ${{ env.SCHEME }} \
            -destination '${{ env.DESTINATION }}' \
            -configuration ${{ env.CONFIGURATION }} \
            -derivedDataPath DerivedData \
            -enableCodeCoverage YES \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            -resultBundlePath TestResults.xcresult \
            | xcpretty --report junit --output test-results.xml
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results.xml
            TestResults.xcresult
          retention-days: 7
      
      - name: Generate code coverage report
        if: success()
        run: |
          xcrun llvm-cov export \
            -format="lcov" \
            -instr-profile DerivedData/Build/ProfileData/*/Coverage.profdata \
            DerivedData/Build/Products/${{ env.CONFIGURATION }}-iphonesimulator/${{ env.SCHEME }}.app/${{ env.SCHEME }} \
            > coverage.lcov
      
      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.lcov
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: üèóÔ∏è Build App
    runs-on: macos-14
    timeout-minutes: 25
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer
      
      - name: Cache SPM dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('**/*.swift', '**/*.m', '**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-
      
      - name: Build app
        run: |
          xcodebuild build \
            -scheme ${{ env.SCHEME }} \
            -destination '${{ env.DESTINATION }}' \
            -configuration Release \
            -derivedDataPath DerivedData \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            -quiet
      
      - name: Archive build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: DerivedData/Build/Products/Release-iphonesimulator/
          retention-days: 7

  summary:
    name: üìä Job Summary
    runs-on: macos-14
    timeout-minutes: 5
    needs: [lint, test, build]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## üéâ CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üîç Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üß™ Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üèóÔ∏è Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Check critical failures
        if: needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "‚ùå Critical checks failed!"
          exit 1
