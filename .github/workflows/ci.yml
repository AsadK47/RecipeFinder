name: iOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  SCHEME: RecipeFinder
  CONFIGURATION: Debug
  DESTINATION: 'platform=iOS Simulator,name=iPhone 17 Pro,OS=latest'

jobs:
  lint:
    name: 🔍 SwiftLint
    runs-on: macos-14
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install SwiftLint
        run: brew install swiftlint
      
      - name: Run SwiftLint
        run: |
          swiftlint lint RecipeFinder/ --config .swiftlint.yml --reporter github-actions-logging

  test:
    name: 🧪 Run Unit Tests
    runs-on: macos-14
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_15.2.app
      
      - name: Show Xcode version
        run: xcodebuild -version
      
      - name: List available simulators
        run: xcrun simctl list devices available
      
      - name: Clean build folder
        run: |
          xcodebuild clean \
            -scheme ${{ env.SCHEME }} \
            -destination '${{ env.DESTINATION }}'
      
      - name: Build for testing
        run: |
          xcodebuild build-for-testing \
            -scheme ${{ env.SCHEME }} \
            -destination '${{ env.DESTINATION }}' \
            -configuration ${{ env.CONFIGURATION }} \
            -derivedDataPath DerivedData
      
      - name: Run tests
        run: |
          xcodebuild test-without-building \
            -scheme ${{ env.SCHEME }} \
            -destination '${{ env.DESTINATION }}' \
            -configuration ${{ env.CONFIGURATION }} \
            -derivedDataPath DerivedData \
            -enableCodeCoverage YES \
            | xcpretty --report junit --output test-results.xml
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.xml
      
      - name: Generate code coverage report
        if: success()
        run: |
          xcrun llvm-cov export \
            -format="lcov" \
            -instr-profile DerivedData/Build/ProfileData/*/Coverage.profdata \
            DerivedData/Build/Products/${{ env.CONFIGURATION }}-iphonesimulator/${{ env.SCHEME }}.app/${{ env.SCHEME }} \
            > coverage.lcov
      
      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.lcov
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: 🏗️ Build App
    runs-on: macos-14
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_15.2.app
      
      - name: Build app
        run: |
          xcodebuild build \
            -scheme ${{ env.SCHEME }} \
            -destination '${{ env.DESTINATION }}' \
            -configuration Release \
            -derivedDataPath DerivedData
      
      - name: Archive build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: DerivedData/Build/Products/Release-iphonesimulator/

  summary:
    name: 📊 Job Summary
    runs-on: macos-14
    needs: [lint, test, build]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## 🎉 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
